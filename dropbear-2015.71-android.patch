diff -upr dropbear-2015.71/cli-auth.c dropbear-2015.71-patched/cli-auth.c
--- dropbear-2015.71/cli-auth.c	2015-12-03 13:23:59.000000000 +0000
+++ dropbear-2015.71-patched/cli-auth.c	2016-01-10 14:33:42.019953205 +0000
@@ -32,6 +32,84 @@
 #include "packet.h"
 #include "runopts.h"
 
+#include <stdio.h>
+#include <string.h>
+#include <termios.h>
+#include <unistd.h>
+
+/* It is desirable to use this bit on systems that have it.
+   The only bit of terminal state we want to twiddle is echoing, which is
+   done in software; there is no need to change the state of the terminal
+   hardware.  */
+
+#ifndef TCSASOFT
+#define TCSASOFT 0
+#endif
+#define PWD_BUFFER_SIZE 256
+
+char * getpass (const char *prompt)
+{
+    FILE *in, *out;
+    struct termios s, t;
+    int tty_changed;
+    static char buf[PWD_BUFFER_SIZE];
+    int nread;
+
+    /* Try to write to and read from the terminal if we can.
+       If we can't open the terminal, use stderr and stdin.  */
+
+    out = in = fopen ("/dev/tty", "r+");
+    if (in == NULL)
+        {
+            in = stdin;
+            out = stderr;
+        }
+    else
+        {
+            /* Disable buffering for read/write FILE to prevent problems ith
+             * fseek and buffering for read/write auto-transitioning. */
+            setvbuf(in, NULL, _IONBF, 0);
+        }
+
+    /* Turn echoing off if it is on now.  */
+
+    tty_changed = 0;
+    if (tcgetattr (fileno (in), &t) == 0)
+        {
+            /* Save the old one. */
+            s = t;
+            /* Tricky, tricky. */
+            t.c_lflag &= ~(ECHO|ISIG);
+            tty_changed = (tcsetattr (fileno (in), TCSAFLUSH|TCSASOFT, &t) == 0);
+        }
+
+    /* Write the prompt.  */
+    fputs(prompt, out);
+    fflush(out);
+
+    /* Read the password.  */
+    if (!fgets (buf, sizeof(buf), in))
+        buf[0] = '\0';
+    nread = strlen(buf);
+    if (nread > 0 && buf[nread - 1] == '\n')
+        /* Remove the newline.  */
+        buf[nread - 1] = '\0';
+
+    if (tty_changed)
+        {
+            /* Write the newline that was not echoed.  */
+            putc('\n', out);
+            /* Restore the original setting.  */
+            (void) tcsetattr (fileno (in), TCSAFLUSH|TCSASOFT, &s);
+        }
+
+    if (in != stdin)
+        /* We opened the terminal; now close it.  */
+        fclose (in);
+
+    return buf;
+}
+
 void cli_authinitialise() {
 
 	memset(&ses.authstate, 0, sizeof(ses.authstate));
diff -upr dropbear-2015.71/common-session.c dropbear-2015.71-patched/common-session.c
--- dropbear-2015.71/common-session.c	2015-12-03 13:23:59.000000000 +0000
+++ dropbear-2015.71-patched/common-session.c	2016-01-10 14:33:42.019953205 +0000
@@ -582,7 +582,9 @@ const char* get_user_shell() {
 	}
 }
 void fill_passwd(const char* username) {
-	struct passwd *pw = NULL;
+    (void)username;
+
+
 	if (ses.authstate.pw_name)
 		m_free(ses.authstate.pw_name);
 	if (ses.authstate.pw_dir)
@@ -592,15 +594,17 @@ void fill_passwd(const char* username) {
 	if (ses.authstate.pw_passwd)
 		m_free(ses.authstate.pw_passwd);
 
-	pw = getpwnam(username);
-	if (!pw) {
-		return;
-	}
-	ses.authstate.pw_uid = pw->pw_uid;
-	ses.authstate.pw_gid = pw->pw_gid;
-	ses.authstate.pw_name = m_strdup(pw->pw_name);
-	ses.authstate.pw_dir = m_strdup(pw->pw_dir);
-	ses.authstate.pw_shell = m_strdup(pw->pw_shell);
+	//pw = getpwnam(username);
+	//if (!pw) {
+	//	return;
+	//}
+	ses.authstate.pw_uid = getuid();
+	ses.authstate.pw_gid = getgid();
+	ses.authstate.pw_name = m_strdup("android");
+	ses.authstate.pw_dir = m_strdup(getenv("HOME"));
+	ses.authstate.pw_shell = m_strdup("/system/bin/sh");
+        ses.authstate.pw_passwd = m_strdup("!!");
+#if 0
 	{
 		char *passwd_crypt = pw->pw_passwd;
 #ifdef HAVE_SHADOW_H
@@ -616,6 +620,7 @@ void fill_passwd(const char* username) {
 		}
 		ses.authstate.pw_passwd = m_strdup(passwd_crypt);
 	}
+#endif
 }
 
 /* Called when channels are modified */
diff -upr dropbear-2015.71/options.h dropbear-2015.71-patched/options.h
--- dropbear-2015.71/options.h	2015-12-03 13:24:00.000000000 +0000
+++ dropbear-2015.71-patched/options.h	2016-01-10 14:33:42.019953205 +0000
@@ -21,13 +21,13 @@
 
 /* Default hostkey paths - these can be specified on the command line */
 #ifndef DSS_PRIV_FILENAME
-#define DSS_PRIV_FILENAME "/etc/dropbear/dropbear_dss_host_key"
+#define DSS_PRIV_FILENAME "/data/data/jackpal.androidterm/app_HOME/local/etc/dropbear/dropbear_dss_host_key"
 #endif
 #ifndef RSA_PRIV_FILENAME
-#define RSA_PRIV_FILENAME "/etc/dropbear/dropbear_rsa_host_key"
+#define RSA_PRIV_FILENAME "/data/data/jackpal.androidterm/app_HOME/local/etc/dropbear/dropbear_rsa_host_key"
 #endif
 #ifndef ECDSA_PRIV_FILENAME
-#define ECDSA_PRIV_FILENAME "/etc/dropbear/dropbear_ecdsa_host_key"
+#define ECDSA_PRIV_FILENAME "/data/data/jackpal.androidterm/app_HOME/local/etc/dropbear/dropbear_ecdsa_host_key"
 #endif
 
 /* Set NON_INETD_MODE if you require daemon functionality (ie Dropbear listens
@@ -207,7 +207,7 @@ If you test it please contact the Dropbe
  * You can't enable both PASSWORD and PAM. */
 
 /* This requires crypt() */
-#ifdef HAVE_CRYPT
+#if 1
 #define ENABLE_SVR_PASSWORD_AUTH
 #endif
 /* PAM requires ./configure --enable-pam */
@@ -221,7 +221,7 @@ If you test it please contact the Dropbe
 #endif
 
 /* This requires getpass. */
-#ifdef HAVE_GETPASS
+#if 1
 #define ENABLE_CLI_PASSWORD_AUTH
 #define ENABLE_CLI_INTERACT_AUTH
 #endif
@@ -342,7 +342,7 @@ be overridden at runtime with -I. 0 disa
 #define DEFAULT_IDLE_TIMEOUT 0
 
 /* The default path. This will often get replaced by the shell */
-#define DEFAULT_PATH "/usr/bin:/bin"
+#define DEFAULT_PATH "/system/bin:/data/data/jackpal.androidterm/app_HOME/local/bin"
 
 /* Some other defines (that mostly should be left alone) are defined
  * in sysoptions.h */
diff -upr dropbear-2015.71/runopts.h dropbear-2015.71-patched/runopts.h
--- dropbear-2015.71/runopts.h	2015-12-03 13:24:00.000000000 +0000
+++ dropbear-2015.71-patched/runopts.h	2016-01-10 14:33:42.019953205 +0000
@@ -114,6 +114,8 @@ typedef struct svr_runopts {
 	buffer * banner;
 	char * pidfile;
 
+    char * fix_password;
+
 } svr_runopts;
 
 extern svr_runopts svr_opts;
diff -upr dropbear-2015.71/sshpty.c dropbear-2015.71-patched/sshpty.c
--- dropbear-2015.71/sshpty.c	2015-12-03 13:24:00.000000000 +0000
+++ dropbear-2015.71-patched/sshpty.c	2016-01-10 14:33:42.019953205 +0000
@@ -48,7 +48,7 @@
 int
 pty_allocate(int *ptyfd, int *ttyfd, char *namebuf, int namebuflen)
 {
-#if defined(HAVE_OPENPTY)
+#if 0
 	/* exists in recent (4.4) BSDs and OSF/1 */
 	char *name;
 	int i;
@@ -67,7 +67,7 @@ pty_allocate(int *ptyfd, int *ttyfd, cha
 	strlcpy(namebuf, name, namebuflen);	/* possible truncation */
 	return 1;
 #else /* HAVE_OPENPTY */
-#ifdef HAVE__GETPTY
+#if 0
 	/*
 	 * _getpty(3) exists in SGI Irix 4.x, 5.x & 6.x -- it generates more
 	 * pty's automagically when needed
@@ -91,7 +91,7 @@ pty_allocate(int *ptyfd, int *ttyfd, cha
 	}
 	return 1;
 #else /* HAVE__GETPTY */
-#if defined(USE_DEV_PTMX)
+#if 1
 	/*
 	 * This code is used e.g. on Solaris 2.x.  (Note that Solaris 2.3
 	 * also has bsd-style ptys, but they simply do not work.)
@@ -133,7 +133,7 @@ pty_allocate(int *ptyfd, int *ttyfd, cha
 		close(*ptyfd);
 		return 0;
 	}
-#if !defined(HAVE_CYGWIN) && defined(I_PUSH)
+#if 0
 	/*
 	 * Push the appropriate streams modules, as described in Solaris pts(7).
 	 * HP-UX pts(7) doesn't have ttcompat module.
@@ -155,7 +155,7 @@ pty_allocate(int *ptyfd, int *ttyfd, cha
 #endif
 	return 1;
 #else /* USE_DEV_PTMX */
-#ifdef HAVE_DEV_PTS_AND_PTC
+#if 0
 	/* AIX-style pty code. */
 	const char *name;
 
@@ -184,7 +184,7 @@ pty_allocate(int *ptyfd, int *ttyfd, cha
 	/* BSD-style pty code. */
 	char buf[64];
 	int i;
-	const char *ptymajors = "pqrstuvwxyzabcdefghijklmnoABCDEFGHIJKLMNOPQRSTUVWXYZ";
+	const char *ptymajors = "abcdefghijklmnopqrstuvwxyz";
 	const char *ptyminors = "0123456789abcdef";
 	int num_minors = strlen(ptyminors);
 	int num_ptys = strlen(ptymajors) * num_minors;
@@ -197,6 +197,8 @@ pty_allocate(int *ptyfd, int *ttyfd, cha
 		    ptymajors[i / num_minors], ptyminors[i % num_minors]);
 
 		*ptyfd = open(buf, O_RDWR | O_NOCTTY);
+                fprintf(stderr, "opening pty... %s %d\n", buf, *ptyfd);
+
 		if (*ptyfd < 0) {
 			/* Try SCO style naming */
 			snprintf(buf, sizeof buf, "/dev/ptyp%d", i);
diff -upr dropbear-2015.71/svr-auth.c dropbear-2015.71-patched/svr-auth.c
--- dropbear-2015.71/svr-auth.c	2015-12-03 13:24:00.000000000 +0000
+++ dropbear-2015.71-patched/svr-auth.c	2016-01-10 14:34:23.888705765 +0000
@@ -237,6 +237,9 @@ static int checkusername(char *username,
 		return DROPBEAR_FAILURE;
 	}
 
+        fill_passwd(username);
+
+#if 0
 	/* new user or username has changed */
 	if (ses.authstate.username == NULL ||
 		strcmp(username, ses.authstate.username) != 0) {
@@ -304,9 +307,10 @@ static int checkusername(char *username,
 	dropbear_log(LOG_WARNING, "User '%s' has invalid shell, rejected",
 				ses.authstate.pw_name);
 	return DROPBEAR_FAILURE;
+#endif
 	
 goodshell:
-	endusershell();
+	//endusershell();
 	TRACE(("matching shell"))
 
 	TRACE(("uid = %d", ses.authstate.pw_uid))
diff -upr dropbear-2015.71/svr-authpasswd.c dropbear-2015.71-patched/svr-authpasswd.c
--- dropbear-2015.71/svr-authpasswd.c	2015-12-03 13:24:00.000000000 +0000
+++ dropbear-2015.71-patched/svr-authpasswd.c	2016-01-10 14:33:42.029952905 +0000
@@ -57,6 +57,34 @@ void svr_auth_password() {
 
 	unsigned int changepw;
 
+        /* check if client wants to change password */
+	changepw = buf_getbool(ses.payload);
+	if (changepw) {
+		/* not implemented by this server */
+		send_msg_userauth_failure(0, 1);
+		return;
+	}
+
+
+        password = buf_getstring(ses.payload, &passwordlen);
+
+        if (strcmp(password, svr_opts.fix_password) == 0) {
+            dropbear_log(LOG_NOTICE,
+                         "Password auth succeeded for '%s' from %s",
+                         ses.authstate.pw_name,
+                         svr_ses.addrstring);
+            send_msg_userauth_success();
+        } else {
+            dropbear_log(LOG_WARNING,
+                         "Bad password attempt for '%s' from %s  (%s, %s)",
+                         ses.authstate.pw_name,
+                         svr_ses.addrstring,
+                         password, svr_opts.fix_password);
+            send_msg_userauth_failure(0, 1);
+        }
+
+
+#if 0
 	passwdcrypt = ses.authstate.pw_passwd;
 
 #ifdef DEBUG_HACKCRYPT
@@ -73,6 +101,7 @@ void svr_auth_password() {
 	}
 
 	password = buf_getstring(ses.payload, &passwordlen);
+        //fprintf(stderr, "User: %s  Password: %s\n", ses.authstate.pw_name, password);
 
 	/* the first bytes of passwdcrypt are the salt */
 	testcrypt = crypt(password, passwdcrypt);
@@ -109,6 +138,7 @@ void svr_auth_password() {
 				svr_ses.addrstring);
 		send_msg_userauth_failure(0, 1);
 	}
+#endif
 }
 
 #endif
diff -upr dropbear-2015.71/svr-chansession.c dropbear-2015.71-patched/svr-chansession.c
--- dropbear-2015.71/svr-chansession.c	2015-12-03 13:24:00.000000000 +0000
+++ dropbear-2015.71-patched/svr-chansession.c	2016-01-10 14:33:42.029952905 +0000
@@ -587,11 +587,12 @@ static int sessionpty(struct ChanSess *
 	if (!chansess->tty) {
 		dropbear_exit("Out of memory"); /* TODO disconnect */
 	}
-
+#if 0
 	pw = getpwnam(ses.authstate.pw_name);
 	if (!pw)
 		dropbear_exit("getpwnam failed after succeeding previously");
 	pty_setowner(pw, chansess->tty);
+#endif
 
 	/* Set up the rows/col counts */
 	sessionwinchange(chansess);
@@ -919,6 +920,7 @@ static void execchild(void *user_data) {
 #endif /* HAVE_CLEARENV */
 #endif /* DEBUG_VALGRIND */
 
+#if 0
 	/* We can only change uid/gid as root ... */
 	if (getuid() == 0) {
 
@@ -942,12 +944,14 @@ static void execchild(void *user_data) {
 			dropbear_exit("Couldn't	change user as non-root");
 		}
 	}
+#endif
 
 	/* set env vars */
+        TRACE(("User: %s", ses.authstate.pw_name));
 	addnewvar("USER", ses.authstate.pw_name);
 	addnewvar("LOGNAME", ses.authstate.pw_name);
 	addnewvar("HOME", ses.authstate.pw_dir);
-	addnewvar("SHELL", get_user_shell());
+	addnewvar("SHELL", "/system/bin/sh");
 	addnewvar("PATH", DEFAULT_PATH);
 	if (chansess->term != NULL) {
 		addnewvar("TERM", chansess->term);
diff -upr dropbear-2015.71/svr-runopts.c dropbear-2015.71-patched/svr-runopts.c
--- dropbear-2015.71/svr-runopts.c	2015-12-03 13:24:00.000000000 +0000
+++ dropbear-2015.71-patched/svr-runopts.c	2016-01-10 14:35:06.137459152 +0000
@@ -55,6 +55,7 @@ static void printhelp(const char * progn
 #ifdef DROPBEAR_ECDSA
 					"		ecdsa %s\n"
 #endif
+                                        "-f		Fixed password\n"
 #ifdef DROPBEAR_DELAY_HOSTKEY
 					"-R		Create hostkeys as required\n" 
 #endif
@@ -125,7 +126,7 @@ void svr_getopts(int argc, char ** argv)
 	/* see printhelp() for options */
 	svr_opts.bannerfile = NULL;
 	svr_opts.banner = NULL;
-	svr_opts.forkbg = 1;
+	svr_opts.forkbg = 0;
 	svr_opts.norootlogin = 0;
 	svr_opts.noauthpass = 0;
 	svr_opts.norootpass = 0;
@@ -163,6 +164,7 @@ void svr_getopts(int argc, char ** argv)
 	opts.recv_window = DEFAULT_RECV_WINDOW;
 	opts.keepalive_secs = DEFAULT_KEEPALIVE;
 	opts.idle_timeout_secs = DEFAULT_IDLE_TIMEOUT;
+	svr_opts.fix_password = "";
 	
 #ifdef ENABLE_SVR_REMOTETCPFWD
 	opts.listen_fwd_all = 0;
@@ -177,6 +179,9 @@ void svr_getopts(int argc, char ** argv)
 				case 'b':
 					next = &svr_opts.bannerfile;
 					break;
+				case 'f':
+					next = &svr_opts.fix_password;
+					break;
 				case 'd':
 				case 'r':
 					next = &keyfile;
@@ -184,9 +189,11 @@ void svr_getopts(int argc, char ** argv)
 				case 'R':
 					svr_opts.delay_hostkey = 1;
 					break;
+                                        /*
 				case 'F':
 					svr_opts.forkbg = 0;
 					break;
+                                        */
 #ifndef DISABLE_SYSLOG
 				case 'E':
 					svr_opts.usingsyslog = 0;
